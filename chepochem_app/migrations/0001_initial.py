# Generated by Django 5.2.7 on 2025-10-23 19:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Электронная почта')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Аватар')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Подтвержден')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата обновления')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='Последний вход')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='chepochem_user_set', related_query_name='chepochem_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='chepochem_user_set', related_query_name='chepochem_user', to='auth.permission', verbose_name='user permissions')),
                ('role', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='chepochem_app.role', verbose_name='Роль')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Слаг')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Иконка')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна')),
                ('sort_order', models.IntegerField(default=0, verbose_name='Порядок сортировки')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='chepochem_app.category', verbose_name='Родительская категория')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('description', models.TextField(verbose_name='Описание')),
                ('price', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Цена')),
                ('currency', models.CharField(default='RUB', max_length=3, verbose_name='Валюта')),
                ('condition', models.CharField(choices=[('new', 'Новое'), ('used', 'Б/у'), ('broken', 'Неисправное')], default='used', max_length=20, verbose_name='Состояние')),
                ('status', models.CharField(choices=[('draft', 'Черновик'), ('pending', 'На модерации'), ('active', 'Активно'), ('paused', 'Приостановлено'), ('sold', 'Продано'), ('rejected', 'Отклонено'), ('expired', 'Истекло')], default='draft', max_length=20, verbose_name='Статус')),
                ('location', models.CharField(max_length=255, verbose_name='Местоположение')),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True, verbose_name='Широта')),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True, verbose_name='Долгота')),
                ('is_negotiable', models.BooleanField(default=True, verbose_name='Торгуется')),
                ('is_urgent', models.BooleanField(default=False, verbose_name='Срочное')),
                ('views_count', models.IntegerField(default=0, verbose_name='Количество просмотров')),
                ('favorites_count', models.IntegerField(default=0, verbose_name='Количество избранных')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата обновления')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата публикации')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата истечения')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chepochem_app.category', verbose_name='Категория')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Объявление',
                'verbose_name_plural': 'Объявления',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ListingImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='listings/', verbose_name='Изображение')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='listings/thumbnails/', verbose_name='Миниатюра')),
                ('alt_text', models.CharField(blank=True, max_length=255, verbose_name='Альтернативный текст')),
                ('sort_order', models.IntegerField(default=0, verbose_name='Порядок сортировки')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Основное')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chepochem_app.listing', verbose_name='Объявление')),
            ],
            options={
                'verbose_name': 'Изображение объявления',
                'verbose_name_plural': 'Изображения объявлений',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ListingModeration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('approve', 'Одобрить'), ('reject', 'Отклонить'), ('pause', 'Приостановить'), ('unpause', 'Возобновить')], max_length=20, verbose_name='Действие')),
                ('reason', models.TextField(blank=True, verbose_name='Причина')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chepochem_app.listing', verbose_name='Объявление')),
                ('moderator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Модератор')),
            ],
            options={
                'verbose_name': 'Модерация объявления',
                'verbose_name_plural': 'Модерация объявлений',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('listing_approved', 'Объявление одобрено'), ('listing_rejected', 'Объявление отклонено'), ('new_review', 'Новый отзыв'), ('new_message', 'Новое сообщение'), ('listing_expired', 'Объявление истекло'), ('report_resolved', 'Жалоба рассмотрена')], max_length=50, verbose_name='Тип')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('content', models.TextField(blank=True, verbose_name='Содержание')),
                ('is_read', models.BooleanField(default=False, verbose_name='Прочитано')),
                ('related_entity_type', models.CharField(blank=True, max_length=50, verbose_name='Тип связанной сущности')),
                ('related_entity_id', models.IntegerField(blank=True, null=True, verbose_name='ID связанной сущности')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('spam', 'Спам'), ('inappropriate', 'Неподходящий контент'), ('fraud', 'Мошенничество'), ('duplicate', 'Дубликат'), ('other', 'Другое')], max_length=50, verbose_name='Тип жалобы')),
                ('description', models.TextField(verbose_name='Описание')),
                ('status', models.CharField(choices=[('pending', 'Ожидает рассмотрения'), ('in_progress', 'В работе'), ('resolved', 'Решено'), ('dismissed', 'Отклонено')], default='pending', max_length=20, verbose_name='Статус')),
                ('resolution', models.TextField(blank=True, verbose_name='Решение')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата решения')),
                ('moderator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports_moderated', to=settings.AUTH_USER_MODEL, verbose_name='Модератор')),
                ('reported_listing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='chepochem_app.listing', verbose_name='На какое объявление подана жалоба')),
                ('reported_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports_received', to=settings.AUTH_USER_MODEL, verbose_name='На кого подана жалоба')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_made', to=settings.AUTH_USER_MODEL, verbose_name='Подавший жалобу')),
            ],
            options={
                'verbose_name': 'Жалоба',
                'verbose_name_plural': 'Жалобы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, verbose_name='Биография')),
                ('location', models.CharField(blank=True, max_length=255, verbose_name='Местоположение')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('gender', models.CharField(blank=True, max_length=20, verbose_name='Пол')),
                ('website', models.URLField(blank=True, verbose_name='Веб-сайт')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата обновления')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserReputation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_score', models.IntegerField(default=0, verbose_name='Общий балл')),
                ('positive_reviews', models.IntegerField(default=0, verbose_name='Положительные отзывы')),
                ('negative_reviews', models.IntegerField(default=0, verbose_name='Отрицательные отзывы')),
                ('neutral_reviews', models.IntegerField(default=0, verbose_name='Нейтральные отзывы')),
                ('reputation_level', models.CharField(choices=[('newbie', 'Новичок'), ('trusted', 'Доверенный'), ('expert', 'Эксперт'), ('master', 'Мастер')], default='newbie', max_length=20, verbose_name='Уровень репутации')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата обновления')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Репутация пользователя',
                'verbose_name_plural': 'Репутация пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('listings_count', models.IntegerField(default=0, verbose_name='Количество объявлений')),
                ('sold_count', models.IntegerField(default=0, verbose_name='Количество проданных')),
                ('purchased_count', models.IntegerField(default=0, verbose_name='Количество купленных')),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Общий доход')),
                ('total_spent', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Общие расходы')),
                ('response_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Процент ответов')),
                ('average_response_time', models.IntegerField(default=0, verbose_name='Среднее время ответа (минуты)')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата обновления')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Статистика пользователя',
                'verbose_name_plural': 'Статистика пользователей',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Оценка')),
                ('comment', models.TextField(verbose_name='Комментарий')),
                ('is_positive', models.BooleanField(verbose_name='Положительный')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата обновления')),
                ('reviewed_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_received', to=settings.AUTH_USER_MODEL, verbose_name='Получатель отзыва')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to=settings.AUTH_USER_MODEL, verbose_name='Автор отзыва')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
                'ordering': ['-created_at'],
                'unique_together': {('reviewer', 'reviewed_user')},
            },
        ),
        migrations.CreateModel(
            name='UserFavorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chepochem_app.listing', verbose_name='Объявление')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Избранное объявление',
                'verbose_name_plural': 'Избранные объявления',
                'unique_together': {('user', 'listing')},
            },
        ),
    ]
